{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Header/index.js","components/Footer/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","onClick","ifClicked","character","index","alt","name","src","image","Wrapper","children","Header","Footer","Navbar","App","state","characters","score","highscore","clicked","restartGame","shuffledCharacters","shuffleCharacters","setState","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wtCAeeA,MAZf,SAAuBC,GACrB,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,UAAWJ,EAAMK,SAC1E,yBAAKJ,UAAU,QACf,yBAAKA,UAAU,iBACb,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,Y,MCD1BC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,MCG1BC,MAJf,SAAgBZ,GACd,OAAO,wBAAIC,UAAU,UAAUD,EAAMW,W,aCGxBE,MAJf,SAAgBb,GACd,OAAO,wBAAIC,UAAU,UAAUD,EAAMW,W,MCGxBG,MAJf,SAAgBd,GACd,OAAO,wBAAIC,UAAU,UAAUD,EAAMW,WC+FxBI,E,4MA1FbC,MAAQ,CACNC,aACAC,MAAO,EACPC,UAAW,G,EAIbhB,UAAY,SAACC,EAAWC,GACtB,GAAID,EAAUgB,QAEZ,EAAKC,kBAEF,CAAC,IAAD,EACyB,EAAKL,MAA3BE,EADH,EACGA,MAAOD,EADV,EACUA,WACbC,IACAD,EAAWZ,GAAOe,SAAU,EAC5B,IAAME,EAAqB,EAAKC,kBAAkBN,GAClD,EAAKO,SAAS,CACZN,QACAD,WAAYK,M,EASlBD,YAAc,WAAM,MAES,EAAKL,MAA1BE,EAFY,EAEZA,MAAOC,EAFK,EAELA,UACTD,EAAQC,IACVA,EAAYD,GAGd,EAAKM,SAAS,CACZN,MAAO,EACPC,YACAF,gB,EAIJM,kBAAoB,SAACN,GAEnB,IADA,IAAsCQ,EAAgBC,EAAlDC,EAAeV,EAAWW,OACvB,IAAMD,GACXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEzCF,EAAiBR,EADjBU,GAAgB,GAEhBV,EAAWU,GAAgBV,EAAWS,GACtCT,EAAWS,GAAeD,EAE5B,OAAOR,G,uDAGC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,yBAAKhB,UAAU,SAAf,sBAMA,yBAAKA,UAAU,aAAf,WACW+B,KAAKhB,MAAME,MACpB,yBAAKjB,UAAU,QAAf,gBACgB+B,KAAKhB,MAAMG,aAI/B,kBAAC,EAAD,6EACA,yBAAKlB,UAAU,aACZ+B,KAAKhB,MAAMC,WAAWgB,KAAI,SAAC7B,EAAWC,GAAZ,OACzB,kBAAC,EAAD,CACE6B,GAAI9B,EAAU8B,GACdC,IAAK/B,EAAU8B,GACfzB,MAAOL,EAAUK,MACjBN,UAAW,EAAKA,UAChBE,MAAOA,EACPD,UAAWA,QAIjB,kBAAC,EAAD,0E,GArFUgC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.597f04e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.ifClicked(props.character, props.index)}>\r\n      <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return <h1 className=\"header\">{props.children}</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return <h3 className=\"footer\">{props.children}</h3>;\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return <h3 className=\"navbar\">{props.children}</h3>;\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Header from \"./components/Header\";\r\nimport characters from \"./characters.json\";\r\nimport Footer from \"./components/Footer\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    characters,\r\n    score: 0,\r\n    highscore: 0,\r\n  };\r\n\r\n  //on click on character, determine if previously clicked (click = true)\r\n  ifClicked = (character, index) => {\r\n    if (character.clicked) {\r\n      // alert(`Game Over :( \\nscore: ${this.state.score}`);\r\n      this.restartGame()\r\n    }\r\n    else {\r\n      let { score, characters } = this.state;\r\n      score++;\r\n      characters[index].clicked = true;\r\n      const shuffledCharacters = this.shuffleCharacters(characters);\r\n      this.setState({\r\n        score,\r\n        characters: shuffledCharacters\r\n      })\r\n    }\r\n  }\r\n\r\n  // fail = () => {\r\n\r\n  // }\r\n\r\n  restartGame = () => {\r\n    //compare score to highScore and update highScore if score is higher + update score to 0 + shuffle\r\n    let { score, highscore } = this.state;\r\n    if (score > highscore) {\r\n      highscore = score\r\n    }\r\n    //shuffle characters if you feel really ambitious\r\n    this.setState({\r\n      score: 0,\r\n      highscore,\r\n      characters\r\n    })\r\n  }\r\n\r\n  shuffleCharacters = (characters) => {\r\n    var currentIndex = characters.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = characters[currentIndex];\r\n      characters[currentIndex] = characters[randomIndex];\r\n      characters[randomIndex] = temporaryValue;\r\n    }\r\n    return characters;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Navbar>\r\n          <div className=\"title\">\r\n            Kat's Clicky Game!\r\n          </div>\r\n          {/* <div className=\"alert\">\r\n            \r\n          </div> */}\r\n          <div className=\"scorecard\">\r\n            Score = {this.state.score}\r\n            <div className=\"high\">\r\n              High Score = {this.state.highscore}\r\n            </div>\r\n          </div>\r\n        </Navbar>\r\n        <Header>Click on any baddass character, but click on her twice and you lose!</Header>\r\n        <div className=\"container\">\r\n          {this.state.characters.map((character, index) => (\r\n            <CharacterCard\r\n              id={character.id}\r\n              key={character.id}\r\n              image={character.image}\r\n              ifClicked={this.ifClicked}\r\n              index={index}\r\n              character={character}\r\n            />\r\n          ))}\r\n        </div>\r\n        <Footer>brought to you by KAT productions....we make terrible games!</Footer>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}